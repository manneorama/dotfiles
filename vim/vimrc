set nocompatible
filetype off

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" plugins go here
Plugin 'VundleVim/Vundle.vim'
Plugin 'vim-scripts/indentpython.vim'
Bundle 'Valloric/YouCompleteMe'
Plugin 'ternjs/tern_for_vim'
Plugin 'scrooloose/syntastic'
Plugin 'scrooloose/nerdtree'
Plugin 'kien/ctrlp.vim'
Plugin 'vim-airline/vim-airline'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-fugitive'
Plugin 'jmcantrell/vim-virtualenv'
Plugin 'pearofducks/ansible-vim'
Plugin 'mileszs/ack.vim'
Plugin 'othree/html5.vim'
Plugin 'othree/yajs.vim'
Plugin 'rdolgushin/groovy.vim'
Plugin 'flazz/vim-colorschemes'
Plugin 'nightsense/simplifysimplify'
Plugin 'grailbio/bazel-compilation-database'
Plugin 'janko-m/vim-test'
Plugin 'ConradIrwin/vim-bracketed-paste'
Plugin 'morhetz/gruvbox'
Bundle 'vim-scripts/groovyindent.git'

call vundle#end()

filetype indent plugin on
let python_highlight_all=1
syntax on

fun! <SID>StripTrailingWhitespaces()
    let l = line(".")
    let c = col(".")
    %s/\s\+$//e
    call cursor(l, c)
endfun

autocmd FileType c,cpp,java,php,ruby,python,javascript,groovy autocmd BufWritePre <buffer> :call <SID>StripTrailingWhitespaces()
autocmd FileType python nmap <F5> :w !python %<cr>

set clipboard=unnamedplus
set regexpengine=1
set laststatus=2
set backspace=indent,eol,start
set encoding=utf-8
set number
set autoindent
set fileformat=unix
set tabstop=4
set expandtab
set shiftwidth=4
set softtabstop=4
set hlsearch
set ttyfast
if !has('nvim')
    set ttyscroll=999
endif
set ruler
set history=128
set undolevels=128
set ignorecase
set smartcase
set incsearch
set showmatch
set relativenumber
set undofile
set wrap
set colorcolumn=120

let mapleader = " "
let g:airline_powerline_fonts = 1

vnoremap . :normal .<CR>
inoremap jk <esc>
inoremap <esc> <nop>

" search using python/perl regexes instead of vim's insane version
vnoremap / \v
nnoremap / /\v

" navigate splits using arrows
nnoremap <up> <C-w>k
nnoremap <down> <C-w>j
nnoremap <left> <C-w>h
nnoremap <right> <C-w>l

" hardcore: no arrow keys in insert mode
inoremap <up> <nop>
inoremap <down> <nop>
inoremap <left> <nop>
inoremap <right> <nop>

" clear search on leader + space (double space)
nnoremap <leader><space> :noh<cr>
" save on leader + w
nnoremap <leader>w :w<cr>
" clear trailing whitespace on leader + s
nnoremap <leader>s :%s/\s\+$//<cr>:let @/=''<cr>
" split and move to next window on leader + ยง
nnoremap <leader>ยง <C-w>v<C-w>l
" format json like a baws
nnoremap <leader>j :%! python -m json.tool<cr>

" NERDTree
nnoremap <leader>t :NERDTreeToggle<CR>
" CTRLP
nnoremap <leader>b :CtrlPBuffer<CR>
nnoremap <leader>f :CtrlP<CR>

" bazel
nnoremap <silent> <leader>ab :!bazel build //...<CR>
nnoremap <silent> <leader>at :!bazel test //...<CR>
nnoremap <silent> <leader>hb :call BazelBuildHere()<CR>
nnoremap <silent> <leader>ht :call BazelTestHere()<CR>

function! BazelGetCurrentBufTarget()
    let bazel_file_label=system("bazel query " . bufname("%") . " --color no --curses no --noshow_progress | tr -d '[:space:]'")
    let bazel_file_package=split(bazel_file_label, ":")[0]
    let g:current_bazel_target=system("bazel query \"attr('srcs', " . bazel_file_label . ", " . bazel_file_package . ":*)\" --color no --curses no --noshow_progress | tr -d '[:space:]'")
endfunction

function! BazelBuildWithErrorReporting()
    set errorformat=ERROR:\ %f:%l:%c:%m
    set errorformat+=%f:%l:%c:%m
    set errorformat+=%-GINFO:\ %.%#
    set errorformat+=%-GLoading:\ %.%#
    set errorformat+=%-G[%.%#

    execute "set makeprg=bazel\\ build\\ //... --color no --curses no --noshow_progress"
    execute "silent ! make"

    let qflist = getqflist()
    if empty(qflist)
        cclose
    else
        call setqflist(qflist)
        copen
        cfirst
    endif
    execute "redraw!"
endfunction

function! BazelBuildHere()
    :call  BazelGetCurrentBufTarget()
    :execute '!bazel build ' . g:current_bazel_target
endfunction

function! BazelTestHere()
    :call BazelGetCurrentBufTarget()
    :execute '!bazel test ' . g:current_bazel_target
endfunction

" vim-test
let test#python#runner = 'nose'
nnoremap <leader>n :TestNearest<cr>
nnoremap <leader>m :TestFile<cr>

" ycm
let g:ycm_autoclose_preview_window_after_completion=1
" syntastic
let g:syntastic_always_populate_loc_list=1
let g:syntastic_auto_loc_list=1
let g:syntastic_check_on_open=1
let g:syntastic_check_on_wq=0
let g:syntastic_python_checkers=['flake8']
let g:syntastic_aggregate_errors=1
let g:syntastic_javascript_checkers=['eslint']
if executable('node_modules/.bin/eslint')
    let g:syntastic_javascript_eslint_exec = 'node_modules/.bin/eslint'
endif

if executable('ag')
  " Use Ag over Grep
  set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
  let g:ackprg = 'ag --vimgrep --smart-case'
  cnoreabbrev ag Ack
  cnoreabbrev aG Ack
  cnoreabbrev Ag Ack
  cnoreabbrev AG Ack
endif

let g:ctrlp_working_path_mode='a'

set wildignore+=*.swp,*.zip,*.tar.gz,*.pyc,*.so,*.dll,*.exe,*.un*
let NERDTreeIgnore=['\.pyc$','\.swp$']

if has("gui_running")
	set guioptions-=m
	set guioptions-=T
	set guioptions-=r
	set guioptions-=L
	set guifont=Monaco\ for\ Powerline\ 10
    colorscheme simplifysimplify-dark
else
    set t_Co=256
    colorscheme gruvbox
endif

"" Allow saving of files as sudo when I forgot to start vim using sudo.
cmap w!! w !sudo tee > /dev/null %

set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
